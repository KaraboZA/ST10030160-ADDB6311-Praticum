CREATE DATABASE SYSTEM;

USE SYSTEM;
GO

--QUESTION 1
CREATE TABLE INSTRUCTOR(
    INS_ID INT PRIMARY KEY NOT NULL,
    INS_FNAME VARCHAR2(25),
    INS_SNAME VARCHAR2(25),
    INS_CONTACT VARCHAR2(20),
    INS_LEVEL INT
)

CREATE TABLE CUSTOMER(
    CUST_ID VARCHAR(4) PRIMARY KEY NOT NULL,
    CUST_FNAME VARCHAR2(25),
    CUST_SNAME VARCHAR2(25),
    CUST_ADDRESS VARCHAR2(30),
    CUST_CONTACT VARCHAR2(20)
)

CREATE TABLE DIVE(
DIVE_ID INT PRIMARY KEY NOT NULL,
DIVE_NAME VARCHAR2(25),
DIVE_DURATION VARCHAR2(15),
DIVE_lOCATION VARCHAR(25),
DIVE_EXP_LEVEL INT,
DIVE_COST NUMBER(3)
)

CREATE TABLE DIVE_EVENT(
    DIVE_EVENT_ID VARCHAR(10) PRIMARY KEY NOT NULL,
    DIVE_DATE DATE,
    DIVE_PARTICIPANTS INT,
    INS_ID INT FOREIGN KEY REFERENCES INSTRUCTOR(INS_ID),
    CUST_ID INT FOREIGN KEY REFERENCES CUSTOMER(CUST_ID),
    DIVE_ID INT FOREIGN KEY REFERENCES DIVE(DIVE_ID),
)
--The following are queries that populate the tables
INSERT INTO INSTRUCTOR (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL)
VALUES (105, 'Simon', 'Jones', '0826598741', 9);

INSERT INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT)
VALUES ('C123', 'Catherine', 'Howard', '31 Lake Side Road', '0822232521');

INSERT INTO DIVE (DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION, DIVE_EXP_LEVEL, DIVE_COST)
VALUES (558, 'Current Adventure', '2 hours', 'Rocklands', 3, 150);

INSERT INTO DIVE_EVENT (DIVE_EVENT_ID, DIVE_DATE, DIVE_PARTICIPANTS, INS_ID, CUST_ID, DIVE_ID)
VALUES ('de_101', '15/JUL/17', 5, 103, 'C115', 558);


--QUESTION 2

-- 1) ADMINISTRATIVE USER
CREATE ROLE SimonJones; /*One of the instructors (SIMON IN THIS 
                          CASE) will be given adminitrative access, mainly 
                          because of the level of experience*/            
GRANT ALL PRIVILEGES ON SYSTEM.* TO SimonJones;
    
-- 2) GENERAL USER
CREATE USER DavidWatson /*Geneal user access is granted to a 
                        customer in this instance*/
GRANT SELECT, UPDATE, DELETE SYSTEM.characters to DavidWatson; 


--QUESTION 3
SELECT (CUST_FNAME||', '||CUST_SNAME) AS Cus 
FROM CUSTOMER;
UNION ALL
SELECT INS_FNAME||', '||INS_SNAME as Inst 
FROM INSTRUCTOR;
/*SELECT (INSTRUCTOR.INS_FNAME ||', '||INSTRUCTOR.INS_SNAME) AS Instructor, (CUSTOMER.CUST_FNAME ||', '||CUSTOMER.CUST_SNAME) AS Customer
FROM DIVE_EVENT*/

--QUESTION 4
SELECT DIVE.DIVE_NAME, DIVE_EVENT.DIVE_DATE
FROM DIVE
INNER JOIN DIVE_EVENT O DIVE.DIVE_ID = DIVE_EVENT.DIVE_ID
WHERE DIVE_EVENT.DIVE_PARTICIPANTS = 10 OR DIVE_EVENT.DIVE_PARTICIPANTS > 10;

--QUESTION 5

  
--QUESTION 6
CREATE VIEW Vw_Dive_Event AS
SELECT INSTRUCTOR.INS_ID, CUSTOMER.CUST_ID, CUSTOMER.CUSTOMER_ADDRESS, 
DIVE_EVENT.DIVE_DURATION, DIVE_EVENT.DIVE_DATE
FROM INSTRUCTOR
WHERE DIVE_EVENT.DIVE_DATE BETWEEN '01/JUL/17' AND '18/JUL/17';

--QUESTION 7
CREATE TRIGGER New_Dive_Event AFTER INSERT
on DIVE_EVENT
EACH ROW
    BEGIN --This section tests the trigger on the specified conditions
        IF DIVE_EVENT.DIVE_PARTICIPANTS < 0 OR DIVE_EVENT.DIVE_PARTICIPANTS = 0
        THEN
        RAISERROR('Participants are less than 1!', 16, 1);
    END
    BEGIN
        ELSE IF DIVE_EVENT.DIVE_PARTICIPANTS > 20
        THEN
        RAISERROR('Participants are less than 20!', 16, 1);
    END

--QUESTION 8
CREATE PROCEDURE sp_Customer_Details @CUSTOMER.CUST_ID INT, @DIVE_EVENT.DIVE_DATE DATE
AS @DIVE_EVENT.DIVE_DATE = DIVE_EVENT.DIVE_DATE
   BEGIN
    THEN
        IF 
        SELECT (CUSTOMER.CUST_FNAME||' '||CUSTOMER.CUST_SNAME), DIVE_EVENT.DIVE_DATE
        FROM CUSTOMER
        INNER JOIN DIVE_EVENT ON CUSTOMER.CUST_ID = DIVE_EVENT.CUST_ID;
    END
//Exception handling is missiong

SELECT * FROM CUSTOMER;
